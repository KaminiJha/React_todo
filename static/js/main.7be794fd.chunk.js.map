{"version":3,"sources":["logo.svg","listItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","listItem","props","listItems","items","map","item","className","key","id","value","onChange","e","editItem","target","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","newItem","concat","alert","console","log","preventDefault","filteredItems","filter","onSubmit","placeholder","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,kLCI5B,SAASC,EAASC,GAE7B,IACMC,EADMD,EAAME,MACIC,KAAI,SAAAC,GACtB,OACI,yBAAKC,UAAU,WAAWC,IAAKF,EAAKG,IAChC,4BACI,2BAAOC,MAAOJ,EAAKA,KAAME,IAAKF,EAAKG,GAAIE,SAAU,SAACC,GAAKV,EAAMW,SAASD,EAAEE,OAAOJ,MAAMJ,EAAKG,OAC9F,0BAAMA,GAAG,UAAS,kBAAC,IAAD,CAAeM,QAAS,kBAAIb,EAAMc,WAAWV,EAAKG,aAKhF,OACI,6BACKN,G,IC0EEc,E,kDAvFb,WAAYf,GACX,IAAD,8BACE,cAAMA,IACDgB,MAAM,CACTd,MAAM,GACNe,YAAY,CACVb,KAAK,GACLG,GAAG,KAGP,EAAKW,YAAY,EAAKA,YAAYC,KAAjB,gBACjB,EAAKC,QAAQ,EAAKA,QAAQD,KAAb,gBACb,EAAKL,WAAW,EAAKA,WAAWK,KAAhB,gBAChB,EAAKR,SAAS,EAAKA,SAASQ,KAAd,gBAZhB,E,wDAcYT,GAEVW,KAAKC,SAAS,CACZL,YAAY,CACVb,KAAKM,EAAEE,OAAOJ,MACdD,GAAGgB,KAAKC,W,8BAMNd,GAEV,IAAMe,EAAQJ,KAAKL,MAAMC,YACR,IAAdQ,EAAQrB,KAETiB,KAAKC,SAAS,CACZpB,MAAMmB,KAAKL,MAAMd,MAAMwB,OAAOD,GAC9BR,YAAY,CACVb,KAAK,GACLG,GAAG,MAKPoB,MAAM,qBAGRC,QAAQC,IAAI,UAAUJ,GACtBG,QAAQC,IAAI,QAAQR,KAAKL,MAAMd,OAC3BQ,EAAEoB,mB,iCAEOxB,GAET,IAAMyB,EAAcV,KAAKL,MAAMd,MAAM8B,QAAO,SAAA5B,GAAI,OAAEA,EAAKG,KAAKD,KAC5DsB,QAAQC,IAAIE,GACZV,KAAKC,SAAS,CACZpB,MAAM6B,M,+BAGDvB,EAAMD,GAEbqB,QAAQC,IAAIrB,EAAMD,GAClB,IAAML,EAAMmB,KAAKL,MAAMd,MACvBA,EAAMC,KAAI,SAAAC,GACLA,EAAKG,IAAIA,IAEVH,EAAKA,KAAKI,MAIda,KAAKC,SAAS,CACZpB,MAAMA,M,+BAKR,OACC,yBAAKG,UAAU,QACZ,gCACE,0BAAME,GAAG,YAAY0B,SAAUZ,KAAKD,SAClC,2BAAOc,YAAY,aAAaC,KAAK,OAAO3B,MAAOa,KAAKL,MAAMC,YAAYb,KAAMK,SAAUY,KAAKH,cAC/F,4BAAQiB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAUjC,MAAOmB,KAAKL,MAAMd,MAAMY,WAAYO,KAAKP,WAAYH,SAAUU,KAAKV,gB,GAjFpEyB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.7be794fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { FaRegTrashAlt } from \"react-icons/fa\";\nimport './listItem.css';\n\nexport default function listItem(props)\n{\n    const items=props.items;\n    const listItems=items.map(item=>{\n        return(\n            <div className=\"listItem\" key={item.id}>\n                <h4>\n                    <input value={item.item} key={item.id} onChange={(e)=>{props.editItem(e.target.value,item.id)}}/>\n                <span id=\"delete\"><FaRegTrashAlt onClick={()=>props.deleteItem(item.id)}/></span>\n                </h4>                \n            </div>\n        )\n    })\n    return(\n        <div>\n            {listItems}\n        </div>\n    )\n}","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItem from './listItem';\n\nclass App extends Component{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      items:[],\n      currentItem:{\n        item:'',\n        id:''\n      }\n    };\n    this.handleInput=this.handleInput.bind(this);\n    this.addItem=this.addItem.bind(this);\n    this.deleteItem=this.deleteItem.bind(this);\n    this.editItem=this.editItem.bind(this);\n  }\n  handleInput(e)\n  {\n    this.setState({\n      currentItem:{\n        item:e.target.value,\n        id:Date.now()\n      }\n\n    })\n\n  }\n  addItem(e)\n  {\nconst newItem=this.state.currentItem;\nif(newItem.item!=\"\")\n{\n  this.setState({\n    items:this.state.items.concat(newItem),\n    currentItem:{\n      item:'',\n      id:''\n    }\n  })\n}\nelse{\n  alert(\"add an item first\")\n}\n\nconsole.log(\"newItem\",newItem)\nconsole.log(\"items\",this.state.items)\n    e.preventDefault()\n  }\n  deleteItem(key)\n  {\n    const filteredItems=this.state.items.filter(item=>item.id!==key)\n    console.log(filteredItems)\n    this.setState({\n      items:filteredItems\n    })\n  }\n  editItem(value,id)\n  {\n    console.log(value,id)\n    const items=this.state.items;\n    items.map(item=>{\n      if(item.id==id)\n      {\n        item.item=value;\n        \n      }\n    })\n    this.setState({\n      items:items\n    })\n  }\n  render()\n  {\n    return(\n     <div className=\"task\">\n        <header>\n          <form id=\"task-form\" onSubmit={this.addItem}>\n            <input placeholder=\"Enter task\" type=\"text\" value={this.state.currentItem.item} onChange={this.handleInput}/>\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItem items={this.state.items}deleteItem={this.deleteItem} editItem={this.editItem}/>\n     </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}